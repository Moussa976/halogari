{# === 1. LIBRAIRIES EXTERNES === #}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.21.0/dist/sweetalert2.all.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

{# === 2. FORMULAIRES & UI (villages, datepicker) === #}
<script>
  $(function () {
    $.getJSON('/cities.json', function (data) {
      const noms = data.map(item => item.name);

      $(".villages").autocomplete({ source: noms });

      $("#form-recherche").on("submit", function (e) {
        let erreur = false;

        $(".villages").each(function () {
          const valeur = $(this).val().trim();
          const valide = noms.includes(valeur);

          if (!valide) {
            $(this).addClass("is-invalid");
            erreur = true;
          } else {
            $(this).removeClass("is-invalid");
          }
        });

        if (erreur) {
          e.preventDefault();
          alert("Veuillez s√©lectionner des villages valides depuis la liste.");
        }
      });
    });
  });

  flatpickr(".dateDepart", {
    locale: "fr",
    altInput: true,
    altFormat: "j F Y",
    dateFormat: "Y-m-d",
    minDate: "today"
  });
</script>

{# === 3. SERVICE WORKER REGISTRATION === #}
<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/js/service-worker.js')
        .then(() => console.log('‚úÖ Service Worker enregistr√©'))
        .catch(err => console.error('‚ùå Erreur SW', err));
    });
  }
</script>

{# === 4. INSTALLATION PWA & NOTIFICATIONS SAFARI === #}
<script>
  let deferredPrompt;

  window.addEventListener('beforeinstallprompt', (e) => {
    e.preventDefault();
    deferredPrompt = e;

    if (localStorage.getItem('pushPermissionAsked')) {
      const installButtons = document.querySelectorAll('.installAppBtn');
      installButtons.forEach((btn) => {
        btn.classList.remove('d-none');
        btn.addEventListener('click', () => {
          btn.disabled = true;
          deferredPrompt.prompt();
          deferredPrompt.userChoice.then((choiceResult) => {
            console.log(choiceResult.outcome === 'accepted'
              ? '‚úÖ L‚Äôapp HaloGari a √©t√© install√©e'
              : '‚ùå Installation refus√©e');
            deferredPrompt = null;
          });
        });
      });
    }
  });

  window.addEventListener('load', () => {
    const ua = navigator.userAgent.toLowerCase();
    const isIos = /iphone|ipad|ipod/.test(ua);
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    const isInStandaloneMode = ('standalone' in window.navigator) && window.navigator.standalone;

    if (isIos && !isSafari) {
      Swal.fire({
        icon: 'warning',
        title: 'Installation non disponible',
        html: `Pour installer <strong>HaloGari</strong>, utilisez <strong>Safari</strong> üì±`,
        confirmButtonText: 'OK',
        allowOutsideClick: false,
        allowEscapeKey: false
      });
      return;
    }

    if (isIos && isSafari && !isInStandaloneMode) {
      Swal.fire({
        icon: 'info',
        title: 'üì≤ Installer HaloGari',
        html: `Appuie sur <strong><i class="bi bi-box-arrow-up"></i> Partager</strong>,
               puis <strong>"Sur l‚Äô√©cran d‚Äôaccueil"</strong>.`,
        confirmButtonText: 'OK'
      });
    }
  });
</script>

{# === 5. MESSAGERIE, SPLASH & PUSH NOTIF JS === #}
<script>
  function checkNewMessages() {
    fetch('/user/messages/unread')
      .then(response => response.json())
      .then(data => {
        const badges = document.querySelectorAll('.message-notif');
        badges.forEach(badge => {
          if (data.unreadCount > 0) {
            badge.textContent = data.unreadCount;
            badge.style.display = 'inline-block';
            badge.dataset.notified = "1";
          } else {
            badge.style.display = 'none';
            badge.dataset.notified = "";
          }
        });
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    if (document.querySelector('.message-notif')) {
      checkNewMessages();
      setInterval(checkNewMessages, 30000);
    }
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const splash = document.getElementById('splash-screen');
    const logo = document.getElementById('splash-logo');
    const text = document.getElementById('splash-text');

    if (!sessionStorage.getItem('splashShown')) {
      sessionStorage.setItem('splashShown', 'true');
      splash.style.display = 'flex';
      splash.style.opacity = '1';

      setTimeout(() => {
        logo.style.opacity = '1';
        logo.style.transform = 'scale(1)';
        text.style.opacity = '1';
        text.style.transform = 'translateY(0)';
      }, 100);

      setTimeout(() => {
        splash.style.opacity = '0';
        splash.style.transition = 'opacity 0.5s ease-out';
        setTimeout(() => splash.remove(), 500);
      }, 1800);
    } else {
      splash.remove();
    }
  });
</script>

<script src="{{ path('js_push_notif') }}"></script>
