{# === 1. SCRIPTS EXTERNES === #}
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.21.0/dist/sweetalert2.all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<!-- Select2 JS -->
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

{# === 2. FORMULAIRES & UI === #}
<script>
  "use strict";

  $(document).ready(function () {
    // Chargement du fichier JSON contenant la liste des villes
    $.getJSON('/cities.json')
      .done(function (data) {
        // Formatage de chaque ville en objet { id, text } utilis√© par Select2
        const options = data.map(v => ({ id: v.name, text: v.name }));

        // Pour chaque √©l√©ment avec la classe .villages
        $(".villages").each(function () {
          const $el = $(this); // √âl√©ment d'origine (input ou select)
          const tagName = $el.prop("tagName").toLowerCase(); // Type de balise : input ou select
          const currentValue = $el.attr("data-current") || $el.val(); // Valeur actuelle (Twig ou navigateur)
          const name = $el.attr("name");
          const id = $el.attr("id") || name;
          const placeholder = $el.attr("placeholder") || "Choisissez un village";

          let $select; // Le <select> final qu'on va utiliser

          // Si c‚Äôest d√©j√† un <select>, on le vide pour le reconstruire proprement
          if (tagName === "select") {
            $select = $el;
            $select.empty();
          }
          // Sinon, c‚Äôest un <input> (souvent dans un form-floating), on le remplace par un <select>
          else {
            $select = $('<select>', {
              id: id,
              name: name,
              class: "form-select villages",
              required: true
            });

            // Remplacement du <input> par <select> dans son conteneur form-floating
            const $wrapper = $el.closest(".form-floating");
            $el.remove();
            $wrapper.prepend($select);
            $wrapper.append(`<label for="${id}">${placeholder}</label>`);
          }

          // Ajoute une option vide au d√©but (pour le placeholder Select2)
          $select.append('<option></option>');

          let foundInList = false;

          // Ajoute toutes les villes dans le <select>
          options.forEach(opt => {
            const isSelected = opt.text === currentValue;
            if (isSelected) foundInList = true;

            $select.append(new Option(opt.text, opt.text, false, isSelected));
          });

          // Si la valeur courante n'√©tait pas dans la liste, on l'ajoute manuellement
          if (!foundInList && currentValue) {
            $select.append(new Option(currentValue, currentValue, true, true));
          }

          // Initialise Select2 sur le <select>
          $select.select2({
            placeholder: placeholder,
            allowClear: true,
            width: "100%"
          }).on('select2:open', function () {
            const searchInput = document.querySelector('.select2-search__field');
            if (searchInput) {
              // Lors de l'ouverture du dropdown, ajoute le placeholder dans le champ de recherche interne
              searchInput.setAttribute('placeholder', 'Recherchez le nom ...');
              searchInput.classList.add('form-control');
            }

            $('.select2-results__options').addClass('bg-vert text-white');
          });

          


          // Forcer l'affichage de la bonne valeur
          $select.val(currentValue).trigger("change");
        });

        // Validation du formulaire lors de la soumission
        $("#form-recherche").on("submit", function (e) {
          let erreur = false;

          // V√©rifie que chaque .villages contient une valeur pr√©sente dans le JSON
          $(".villages").each(function () {
            const valeur = $(this).val();
            const valide = valeur && options.some(opt => opt.text === valeur);

            if (!valide) {
              $(this).addClass("is-invalid");
              erreur = true;
            } else {
              $(this).removeClass("is-invalid");
            }
          });

          // R√©cup√®re les deux villages s√©lectionn√©s
          const depart = $("select[name='select_departure']").val();
          const arrivee = $("select[name='select_arrival']").val();

          // Si d√©part et arriv√©e sont identiques : erreur bloquante
          if (depart && arrivee && depart === arrivee) {
            erreur = true;
            Swal.fire({
              icon: "warning",
              title: "Villages identiques",
              text: "Le village de d√©part et d'arriv√©e ne peuvent pas √™tre identiques."
            });
            e.preventDefault(); // Bloque l'envoi du formulaire
            return;
          }

          // V√©rification sur la date trajet
          const dateTrajet = $("input[name='date_trajet']").val();
          if (!dateTrajet) {
            e.preventDefault();
            Swal.fire({
              icon: "warning",
              title: "Date manquante",
              text: "Veuillez s√©lectionner une date de trajet."
            });
            return;
          }

          // Si une autre erreur a √©t√© d√©tect√©e plus haut
          if (erreur) {
            e.preventDefault();
            Swal.fire({
              icon: "error",
              title: "Erreur",
              text: "Veuillez s√©lectionner des villages valides."
            });
          }
        });
      });

    flatpickr(".dateDepart", {
      locale: "fr",
      altInput: true,
      altFormat: "j F Y",
      dateFormat: "Y-m-d",
      minDate: "today"
    });
  });
</script>



{# === 3. SERVICE WORKER REGISTRATION === #}
<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/js/service-worker.js')
        .then(() => console.log('‚úÖ Service Worker enregistr√©'))
        .catch(err => console.error('‚ùå Erreur SW', err));
    });
  }
</script>

{# === 4. INSTALLATION PWA & NOTIFICATIONS SAFARI === #}
<script>
  let deferredPrompt;

  window.addEventListener('beforeinstallprompt', (e) => {
    e.preventDefault();
    deferredPrompt = e;

    if (localStorage.getItem('pushPermissionAsked')) {
      const installButtons = document.querySelectorAll('.installAppBtn');
      installButtons.forEach((btn) => {
        btn.classList.remove('d-none');
        btn.addEventListener('click', () => {
          btn.disabled = true;
          deferredPrompt.prompt();
          deferredPrompt.userChoice.then((choiceResult) => {
            console.log(choiceResult.outcome === 'accepted'
              ? '‚úÖ L‚Äôapp HaloGari a √©t√© install√©e'
              : '‚ùå Installation refus√©e');
            deferredPrompt = null;
          });
        });
      });
    }
  });

  window.addEventListener('load', () => {
    const ua = navigator.userAgent.toLowerCase();
    const isIos = /iphone|ipad|ipod/.test(ua);
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    const isInStandaloneMode = ('standalone' in window.navigator) && window.navigator.standalone;

    if (isIos && !isSafari) {
      Swal.fire({
        icon: 'warning',
        title: 'Installation non disponible',
        html: `Pour installer <strong>HaloGari</strong>, utilisez <strong>Safari</strong> üì±`,
        confirmButtonText: 'OK',
        allowOutsideClick: false,
        allowEscapeKey: false
      });
      return;
    }

    if (isIos && isSafari && !isInStandaloneMode) {
      Swal.fire({
        icon: 'info',
        title: 'üì≤ Installer HaloGari',
        html: `Appuie sur <strong><i class="bi bi-box-arrow-up"></i> Partager</strong>,
               puis <strong>"Sur l‚Äô√©cran d‚Äôaccueil"</strong>.`,
        confirmButtonText: 'OK'
      });
    }
  });
</script>

{# === 5. MESSAGERIE, SPLASH & PUSH NOTIF JS === #}
<script>
  function checkNewMessages() {
    fetch('/user/messages/unread')
      .then(response => response.json())
      .then(data => {
        const badges = document.querySelectorAll('.message-notif');
        badges.forEach(badge => {
          if (data.unreadCount > 0) {
            badge.textContent = data.unreadCount;
            badge.style.display = 'inline-block';
            badge.dataset.notified = "1";
          } else {
            badge.style.display = 'none';
            badge.dataset.notified = "";
          }
        });
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    if (document.querySelector('.message-notif')) {
      checkNewMessages();
      setInterval(checkNewMessages, 30000);
    }
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const splash = document.getElementById('splash-screen');
    const logo = document.getElementById('splash-logo');
    const text = document.getElementById('splash-text');

    if (!sessionStorage.getItem('splashShown')) {
      sessionStorage.setItem('splashShown', 'true');
      splash.style.display = 'flex';
      splash.style.opacity = '1';

      setTimeout(() => {
        logo.style.opacity = '1';
        logo.style.transform = 'scale(1)';
        text.style.opacity = '1';
        text.style.transform = 'translateY(0)';
      }, 100);

      setTimeout(() => {
        splash.style.opacity = '0';
        splash.style.transition = 'opacity 0.5s ease-out';
        setTimeout(() => splash.remove(), 500);
      }, 1800);
    } else {
      splash.remove();
    }
  });
</script>

<script src="{{ path('js_push_notif') }}"></script>