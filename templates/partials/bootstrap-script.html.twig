<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.21.0/dist/sweetalert2.all.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
  $(function () {
    // Charger la liste des villages
    $.getJSON('/cities.json', function (data) {
      const noms = data.map(item => item.name);

      // Autocomplete pour tous les champs .villages
      $(".villages").autocomplete({ source: noms });

      // Validation du formulaire
      $("#form-recherche").on("submit", function (e) {
        let erreur = false;

        $(".villages").each(function () {
          const valeur = $(this).val().trim();
          const valide = noms.includes(valeur);

          if (!valide) {
            $(this).addClass("is-invalid");
            erreur = true;
          } else {
            $(this).removeClass("is-invalid");
          }
        });

        if (erreur) {
          e.preventDefault(); // Emp√™che l'envoi
          // Optionnel : ajouter un message global
          alert("Veuillez s√©lectionner des villages valides depuis la liste.");
        }
      });
    });
  });

  // DatePicker
  flatpickr(".dateDepart", {
    locale: "fr",                // Traduction fran√ßaise
    altInput: true,              // Affiche un champ "alternatif"
    altFormat: "j F Y",          // Format lisible : 15 mai 2025
    dateFormat: "Y-m-d",         // Format r√©el soumis au serveur
    minDate: "today"            // ‚ùå Interdit les dates pass√©e
  });
</script>
<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then(() => console.log('‚úÖ Service Worker enregistr√©'))
        .catch(err => console.error('‚ùå Erreur SW', err));
    });
  }
</script>

<script>
  let deferredPrompt;

  // üëâ Pour Android : g√©rer l‚Äô√©v√©nement "beforeinstallprompt"
  window.addEventListener('beforeinstallprompt', (e) => {
    e.preventDefault();
    deferredPrompt = e;

    // Cibler tous les boutons .installAppBtn
    const installButtons = document.querySelectorAll('.installAppBtn');

    installButtons.forEach((btn) => {
      btn.classList.remove('d-none');
      btn.addEventListener('click', () => {
        btn.disabled = true;
        deferredPrompt.prompt();
        deferredPrompt.userChoice.then((choiceResult) => {
          if (choiceResult.outcome === 'accepted') {
            console.log('‚úÖ L‚Äôapp HaloGari a √©t√© install√©e');
          } else {
            console.log('‚ùå Installation refus√©e');
          }
          deferredPrompt = null;
        });
      });
    });
  });

  // üëâ Pour iPhone : afficher une banni√®re d'instructions manuelle
  window.addEventListener('load', () => {
    const isIos = /iphone|ipad|ipod/.test(window.navigator.userAgent.toLowerCase());
    const isInStandaloneMode = ('standalone' in window.navigator) && window.navigator.standalone;

    if (isIos && !isInStandaloneMode) {
      const banner = document.createElement('div');
      banner.className = 'alert alert-warning text-center m-0 rounded-0';
      banner.style.zIndex = 9999;
      banner.innerHTML = `
        <strong>üì± Installer HaloGari</strong><br>
        Appuyez sur <span style="font-weight:bold">Partager</span>
        <i class="bi bi-share" style="font-size: 1.2em;"></i> puis <span style="font-weight:bold">"Sur l‚Äô√©cran d‚Äôaccueil"</span>.
      `;
      document.body.insertBefore(banner, document.body.firstChild);
    }
  });
</script>


<script>
  function checkNewMessages() {
    fetch('/user/messages/unread')
      .then(response => response.json())
      .then(data => {
        const badges = document.querySelectorAll('.message-notif');

        badges.forEach(badge => {
          if (data.unreadCount > 0) {
            badge.textContent = data.unreadCount;
            badge.style.display = 'inline-block';

            if (!badge.dataset.notified) {
              badge.dataset.notified = "1";
            }
          } else {
            badge.style.display = 'none';
            badge.dataset.notified = "";
          }
        });
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    if (document.querySelector('.message-notif')) {
      checkNewMessages();
      setInterval(checkNewMessages, 30000);
    }
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const splash = document.getElementById('splash-screen');
    const logo = document.getElementById('splash-logo');
    const text = document.getElementById('splash-text');

    // V√©rifie si le splash a d√©j√† √©t√© vu cette session
    if (!sessionStorage.getItem('splashShown')) {
      sessionStorage.setItem('splashShown', 'true');

      // Affiche le splash
      splash.style.display = 'flex';
      splash.style.opacity = '1';

      // Animation du logo et texte
      setTimeout(() => {
        logo.style.opacity = '1';
        logo.style.transform = 'scale(1)';
        text.style.opacity = '1';
        text.style.transform = 'translateY(0)';
      }, 100);

      // Disparition du splash
      setTimeout(() => {
        splash.style.opacity = '0';
        splash.style.transition = 'opacity 0.5s ease-out';
        setTimeout(() => splash.remove(), 500);
      }, 1800);
    } else {
      // Si d√©j√† vu dans cette session : le retirer imm√©diatement
      splash.remove();
    }
  });
</script>

