{# templates/push/push-notif.js.twig #}

const VAPID_PUBLIC_KEY = '{{ vapidPublicKey }}'; // Inject√©e depuis Symfony

/**
 * Convertit une cl√© base64 (url-safe) en Uint8Array
 */
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
  const rawData = atob(base64);
  return Uint8Array.from([...rawData].map(char => char.charCodeAt(0)));
}

/**
 * Fonction principale d‚Äôabonnement Web Push
 */
async function subscribeToPush() {
  if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
    alert('Notifications non support√©es sur ce navigateur.');
    return;
  }

  // Enregistre le Service Worker
  const registration = await navigator.serviceWorker.register('/js/service-worker.js');

  // Abonnement Push
  const subscription = await registration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: urlBase64ToUint8Array(VAPID_PUBLIC_KEY)
  });

  // Envoie l'abonnement au backend Symfony
  const response = await fetch('/abonnement-push', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(subscription)
  });

  if (response.ok) {
    console.log('‚úÖ Abonnement Push enregistr√©');
  } else {
    console.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôabonnement');
  }
}

/**
 * D√®s que la page est charg√©e, demande √† l‚Äôutilisateur s‚Äôil veut activer les notifications
 */
document.addEventListener('DOMContentLoaded', () => {
  if (!localStorage.getItem('pushPermissionAsked')) {
    setTimeout(() => {
      Swal.fire({
        title: 'üîî Notifications HaloGari',
        html: 'Souhaitez-vous recevoir les notifications pour vos r√©servations et messages ?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Oui, activer',
        cancelButtonText: 'Non, refuser',
        allowOutsideClick: false,
        allowEscapeKey: false
      }).then((result) => {
        localStorage.setItem('pushPermissionAsked', '1');

        if (result.isConfirmed) {
        subscribeToPush();
        setTimeout(() => {
          Swal.fire('‚úÖ Notifications activ√©es', '', 'success');
        }, 2000); // Attendre 2 secondes
      } else {
        Swal.fire('‚ÑπÔ∏è Notifications d√©sactiv√©es', '', 'info');
      }
      });
    }, 5000); // üëà d√©lai de 5 secondes avant d'afficher la popup
  }
});


