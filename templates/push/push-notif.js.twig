{# templates/push/push-notif.js.twig #}

/**
 * Cl√© publique VAPID inject√©e par Symfony pour l‚Äôabonnement Web Push
 */
const VAPID_PUBLIC_KEY = '{{ vapidPublicKey }}';

/**
 * Convertit une cl√© Base64 URL-safe en Uint8Array (requis pour l‚ÄôAPI Push)
 */
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
  const rawData = atob(base64);
  return Uint8Array.from([...rawData].map(char => char.charCodeAt(0)));
}

/**
 * Fonction d'abonnement aux notifications Push (Web Push API)
 */
async function subscribeToPush() {
  if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
    alert('Notifications non support√©es sur ce navigateur.');
    return;
  }

  const registration = await navigator.serviceWorker.register('/js/service-worker.js');

  const subscription = await registration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: urlBase64ToUint8Array(VAPID_PUBLIC_KEY)
  });

  const response = await fetch('/abonnement-push', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(subscription)
  });

  if (response.ok) {
    console.log('‚úÖ Abonnement Push enregistr√©');
  } else {
    console.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôabonnement');
  }
}

/**
 * G√®re l‚Äôaffichage du popup de notifications + installation PWA sur iOS
 */
document.addEventListener('DOMContentLoaded', () => {
  // ‚Üí D√©tection de l'environnement
  const ua = navigator.userAgent.toLowerCase();
  const isIos = /iphone|ipad|ipod/.test(ua);
  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  const isInStandaloneMode = ('standalone' in window.navigator) && window.navigator.standalone;

  // üì± iPhone + autre navigateur que Safari ‚ûû Message bloquant
  if (isIos && !isSafari) {
    Swal.fire({
      icon: 'warning',
      title: 'Installation non disponible',
      html: `Pour installer <strong>HaloGari</strong> sur votre iPhone,<br>
             veuillez ouvrir ce site dans <strong>Safari</strong> üì±`,
      confirmButtonText: 'OK',
      allowOutsideClick: false,
      allowEscapeKey: false
    });
    return;
  }

  // ‚úÖ Si l'utilisateur n'a pas encore r√©pondu au popup notifications
  if (!localStorage.getItem('pushPermissionAsked')) {
    setTimeout(() => {
      Swal.fire({
        title: 'üîî Notifications HaloGari',
        html: 'Souhaitez-vous recevoir les notifications pour vos r√©servations et messages ?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Oui, activer',
        cancelButtonText: 'Non, refuser',
        allowOutsideClick: false,
        allowEscapeKey: false
      }).then((result) => {
        // Marquer que l'utilisateur a d√©j√† r√©pondu
        localStorage.setItem('pushPermissionAsked', '1');

        if (result.isConfirmed) {
          subscribeToPush();

          // Confirmer l'activation
          setTimeout(() => {
            Swal.fire('‚úÖ Notifications activ√©es', '', 'success');
          }, 2000);

          // üì± Si Safari sur iOS, mais non install√© ‚ûû instructions d'installation
          if (isIos && isSafari && !isInStandaloneMode) {
            setTimeout(() => {
              Swal.fire({
                icon: 'info',
                title: 'üì≤ Installer HaloGari',
                html: `Appuie sur <strong><i class="bi bi-box-arrow-up"></i> Partager</strong>,<br>
                       puis sur <strong>\"Sur l‚Äô√©cran d‚Äôaccueil\"</strong> pour installer HaloGari.`,
                confirmButtonText: 'OK'
              });
            }, 2000);
          }
        } else {
          // Refus d'autorisation
          Swal.fire('‚ÑπÔ∏è Notifications d√©sactiv√©es', '', 'info');
        }
      });
    }, 5000); // D√©lai avant d'afficher la premi√®re popup
  }
});
